node(){
    properties([
     disableConcurrentBuilds(),
     parameters([
        choice(name: 'DCMAKE_BUILD_TYPE', choices: 'Release\nDebug\nRelWithDebInfo\nMinSizeRel', description: 'Please specify the build type'),
        choice(name: 'DBUILD_CORE_SHARED', choices: 'ON\nOFF', description: 'Build core as shared library'),
        choice(name: 'DBUILD_EXAMPLES', choices: 'OFF\nON', description: 'BUILD_EXAMPLES'),
        choice(name: 'DBUILD_TESTS', choices: 'OFF\nON', description: 'BUILD_TESTS'),
        choice(name: 'DBUILD_CLI', choices: 'OFF\nON', description: 'DBUILD_CLI'),

        text(name: 'sha1', defaultValue: '*/master', description: 'parameter to enable manual running')
     ])
   ])

    def targetList = ["linux64", "linux86", "win86", "win64"]

    def mainJobName = "DMS-Core-Main"
    def linuxJobName = "DMS-Core-Linux"
    def windowsJobName = "DMS-Core-Windows"

    def credentialsId = "jonathangithub"
    def repositoryPath = "https://github.com/jonathangoorin/somecode/"

    stage("Start Builds"){
        for(target in targetList){

            //define downstream (child) jobs parameters
            def jobArgs = [:]

            //CMAKE FLAGS
            jobArgs.put("DCMAKE_BUILD_TYPE", params.DCMAKE_BUILD_TYPE)
            jobArgs.put("DBUILD_CORE_SHARED",params.DBUILD_CORE_SHARED)
            jobArgs.put("DBUILD_EXAMPLES", params.DBUILD_EXAMPLES)
            jobArgs.put("DBUILD_TESTS", params.DBUILD_TESTS)
            jobArgs.put("DBUILD_CLI", params.DBUILD_CLI)
            jobArgs.put("DBUILD_CLI", params.DBUILD_CLI)

            jobArgs.put("credentialsId", credentialsId)
            jobArgs.put("ghprbPullId", ${ghprbPullId})
            jobArgs.put("sha1", ${sha1})


            if(target.startsWith("linux")){
                
            }

            if(target.startsWith("win")){
                echo "here will be windows job"
            }
        }
    }
}