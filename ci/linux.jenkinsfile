node("linux"){
    properties([
     disableConcurrentBuilds(),
     parameters([
        text(name: 'TARGET', defaultValue: 'linux64', description: 'Target architecture to build the project'),
        choice(name: 'DCMAKE_BUILD_TYPE', choices: 'Release\nDebug\nRelWithDebInfo\nMinSizeRel', description: 'Please specify the build type'),
        choice(name: 'DBUILD_CORE_SHARED', choices: 'ON\nOFF', description: 'Build core as shared library'),
        choice(name: 'DBUILD_EXAMPLES', choices: 'OFF\nON', description: 'BUILD_EXAMPLES'),
        choice(name: 'DBUILD_TESTS', choices: 'OFF\nON', description: 'BUILD_TESTS'),
        choice(name: 'DBUILD_CLI', choices: 'OFF\nON', description: 'DBUILD_CLI'),

        text(name: 'credentialsId', description: 'JENKINS Credential id'),
        text(name: 'repositoryPath', description: 'http path to repository to checkout'),
        text(name: 'sha1', defaultValue: '*/ci_test_jonathan', description: 'branch to checkout'),
        text(name: 'refSpec', defaultValue: '', description: 'refSpec for git to checkout')
     ])
   ])
  
   timestamps{

      // Sets the build name
      currentBuild.displayName = params.TARGET + "#" + env.BUILD_ID
      
      def buildDirectory = "ci_build/${params.TARGET}"
      def artifactDefaultName = "Core.tar.gz"

      def dockcrossFilePath = "ci/dockerfiles/${params.TARGET}"
      def dockcrossRunFilePath = "${buildDirectory}/${params.TARGET}.sh"
      def buildThreadCount = 4


      stage("Clone"){

        sh script: "git gc --prune=now && git remote prune origin"

          checkout([$class: 'GitSCM', 
            branches: [[name: params.sha1]], 
            doGenerateSubmoduleConfigurations: false, 
            extensions: [[$class: 'CloneOption', 
                            depth: 0, 
                            honorRefspec: true, 
                            noTags: false, 
                            reference: '', 
                            shallow: true],
                            [$class: 'CheckoutOption',timeout: 90]
                            ],
            submoduleCfg: [], 
            userRemoteConfigs: [[credentialsId: params.credentialsId, 
                                refspec: params.refSpec, 
                                url: params.repositoryPath ]]
            ])
      }

      stage("Dockcross Image ${params.TARGET}"){
        // build image
        sh script: "docker build -t ${params.TARGET} --file ${dockcrossFilePath} .", label: "Build Docker Image"

        // create build directory 
        sh script: "mkdir -p ${buildDirectory}", label: "Create Build directory"

        // create dockcross run file 
        sh script: "docker run --rm  ${params.TARGET} > ${dockcrossRunFilePath} && chmod +x ${dockcrossRunFilePath}", label: "Create Dockross run file"
      }
      /*
      stage("Build Core"){
          sh script: """${runFile} bash -c 'cd ${params.BUILD_DIRECTORY} && \
              cmake ../.. \
              -DCMAKE_BUILD_TYPE=${params.DCMAKE_BUILD_TYPE} \
              -DBUILD_CORE_SHARED=${params.DBUILD_CORE_SHARED} \
              -DBUILD_EXAMPLES=${params.DBUILD_EXAMPLES} \
              -DBUILD_TESTS=${params.DBUILD_TESTS}
              '""" , 
              label: "CMAKE Configure"

          sh script: """${runFile} bash -c 'cd ${params.BUILD_DIRECTORY} && \
                sudo make -j${buildThreadCount}'""", 
              label: "CMAKE Build"
      }
      */
    }
}