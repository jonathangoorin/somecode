node(){

/*
written by Jonathan Goorin oct 2019

Requirements:
1: linux nodes labled as "linux"
2: windows nodes labeled as "windows"
3: GHPRB plugin (GitHub Pull Request Builder)
4: Pipeline plugin
*/

    properties([
     disableConcurrentBuilds(),
     parameters([
        choice(name: 'DCMAKE_BUILD_TYPE', choices: 'Release\nDebug\nRelWithDebInfo\nMinSizeRel', description: 'Please specify the build type'),
        choice(name: 'DBUILD_CORE_SHARED', choices: 'ON\nOFF', description: 'Build core as shared library'),
        choice(name: 'DBUILD_EXAMPLES', choices: 'OFF\nON', description: 'BUILD_EXAMPLES'),
        choice(name: 'DBUILD_TESTS', choices: 'OFF\nON', description: 'BUILD_TESTS'),
        choice(name: 'DBUILD_CLI', choices: 'OFF\nON', description: 'DBUILD_CLI'),
        text(name: 'sha1', defaultValue: '*/master', description: 'parameter to enable manual running')
     ])
   ])

    def targetList = ["linux64", "linux86", "win86", "win64"]

    def mainJobName = "DMS-Core-Main"
    def linuxJobName = "DMS-Core-Linux"
    def windowsJobName = "DMS-Core-Windows"

    def credentialsId = "jonathangithub"
    def repositoryPath = "https://github.com/jonathangoorin/somecode/"

    stage("Start Builds"){

        //jobs to build in parallel
        def buildList = [:]

        for(target in targetList){

            //define downstream (child) jobs parameters
            def jobArgs = [:]
            jobArgs.put("TARGET", target)

            //CMAKE Flags
            jobArgs.put("DCMAKE_BUILD_TYPE", params.DCMAKE_BUILD_TYPE)
            jobArgs.put("DBUILD_CORE_SHARED",params.DBUILD_CORE_SHARED)
            jobArgs.put("DBUILD_EXAMPLES", params.DBUILD_EXAMPLES)
            jobArgs.put("DBUILD_TESTS", params.DBUILD_TESTS)
            jobArgs.put("DBUILD_CLI", params.DBUILD_CLI)

            jobArgs.put("credentialsId", credentialsId)
            jobArgs.put("repositoryPath", repositoryPath)

            //github pull request builder parameters workaround to launch manual
            try{
                jobArgs.put("refScpec", "+refs/pull/${ghprbPullId}/*:refs/remotes/origin/pr/${ghprbPullId}/*")
                jobArgs.put("sha1", sha1)
            }
            catch(err){
                echo "dry run defining the variables "
                jobArgs.put("refScpec", "")
                jobArgs.put("sha1", "*/master")
            }

            if(target.startsWith("linux")){
                echo "configuring the linux job for ${target}"
                jobArgs.put("MAIN_JOB_NAME", linuxJobName)
                echo "added it to the list"
                buildList.put(target, getBuildJobClosure(jobArgs))
            }

            if(target.startsWith("win")){
                echo "configuring the windows job for ${target}"
               // jobArgs.put("MAIN_JOB_NAME", windowsJobName)
               //buildList.put(target, getBuildJobClosure(jobArgs))
            }            
        }

        // start the jobs
        echo "start the builds"
        parallel(buildList)
    }
}


def getBuildJobClosure(Map jobArgs){
    return{
        stage("Start Build ${jobArgs.TARGET}"){
            build job: jobArgs.MAIN_JOB_NAME, parameters :[
                    string(name: 'TARGET', value: jobArgs.TARGET),
                    string(name: 'DCMAKE_BUILD_TYPE', value: jobArgs.DCMAKE_BUILD_TYPE),
                    string(name: 'DBUILD_CORE_SHARED', value: jobArgs.DBUILD_CORE_SHARED),
                    string(name: 'DBUILD_EXAMPLES', value: jobArgs.DBUILD_EXAMPLES),
                    string(name: 'DBUILD_TESTS', value: jobArgs.DBUILD_TESTS),
                    
                    string(name: "credentialsId", value: jobArgs.credentialsId),
                    string(name: "repositoryPath", value: jobArgs.repositoryPath),
                    string(name: "refScpec", value: jobArgs.refScpec),
                    string(name: "sha1", value: jobArgs.sha1)
                    ]
        }
    }
}